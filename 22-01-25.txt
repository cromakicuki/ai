파이썬 이란?
파이썬은 1991년 네덜란드의 수학자 '귀도 반 로섬'에 의해 개발된 프로그래밍 언어로 '비단뱀'에서 유래한 로고를 볼 수 있다. 

구글의 많은 앱들과 인스타그램 등등의 실용적인 앱들도 파이썬으로 만들어졌다. 

- 장점

1) 인터프리터 언어이다.
컴퓨터 언어는 전체적으로 두 개로 나뉜다. 인터프린터와 컴파일러. 대표적으로 두 개로 나눌 때에는 인터프리터에는 파이썬, 컴파일러에는 java를 사용한다. 그러나 java는 어느쪽이냐면 하이브리드에 가깝다.

인터프리터 언어는 한 줄씩 실행이 되며, 컴파일러는 전부를 합해 한 번에 실행이 된다.

인터프리터 = Line by line (한 줄식 실행되어 결과를 바로바로 확인할 수 있다.)

2) 플랫폼에 독립적이다.
어떠한 운영체제에서도 같은 파이썬 코드를 실행할 수 있다. 다양한 운영체제 windows, osx, linux... 등등에서 동일한 코드로 동일한 결과를 볼 수 있다. 

3) 객체 지향언어이다.
object oriented 클래스와 객체를 기반으로 하는 언어로 정보은닉, 상속 등의 개념을 지원한다. 

4) 동적 타이핑 dynamic typing 언어이다.
프로그램 실행 중에 다른 작업을 처리할 수 있다. 

5) 개발 속도가 빠르다.
이미 완성된 많은 다양한 라이브러리(이미 만들어져있는 것을 가져와 활용할 수 있다), 데이터 분석 pandas, 수치연산 numpy, 시각화 matplotlib, Django, flask 웹개발, science kit learning 딥러닝 등등을 사용하여 빠르게 프로그램을 작성할 수 있다. 

- 단점

하드웨어 (컨트롤이 어렵다), 앱 개발(아이폰, 안드로이드) 등에는 적용하기 어렵다.



** java는 인터페이스, C언어는 포인터에서 열심히 하면 좋다.

#############
# 주석 comment
#############

주석은 프로그램 소스 코드에 설명을 작성한 것을 의미한다. 
주석은 프로그램 실행에 전혀 영향을 끼치지 않는다. 사람에게 전달하기 위해서 만드는 것이다.
유지 보수나 팀 작업을 할 때 모두가 이해하기 쉽고 의미 전달이 잘 되는 주석을 작성하는 것이 바람직하다.
파이썬에서 주석은 #으로 시작하거나 '''내용''' 의 삼중 따옴표로 표현한다.
java에서는 //로 표현한다.

* 파이썬에서는 주석에서 보통 #을 사용하며, 단축키로는 컨트롤+슬래시가 있다.
* 삼중 따옴표는 컴퓨터가 읽긴 읽는다. 그러나, 실제로 코드를 입력하면 보이지 않게 된다. 아예 내용이 보이지 않는 것은 #이다.

삼중 따옴표=삼중 주석 : Doc String이라고 하여 문서화할 때에 쓰이기도 하지만, 잘 쓰이지 않는다.

:: 개발은 대부분이 팀 작업이기 때문에 너무 개성이 튀지 않는 것이 좋다. ::

#############
# 변수 Variable
#############

::변수는 안 쓸 수 없다.::
변수는 어떤 데이터를 저장할 때 사용하는 메모리 저장소(?)이다. (초심자용 설명)

변수를 만들 때에는 = 등호 왼쪽에 변수 명을 작성하고 등호 오른쪽에는 저장할 값을 작성한다.

변수명 규칙
1. 영문, 한글, 숫자, 밑줄로 구성된다. (그러나 변수명으로 한글은 쓰지 않는게 좋다.)
2. 특수문자는 사용할 수 없다.
(ex: ! @ # $ % . . . .)
3. 대문자와 소문자를 구분한다.
(프로그래밍 언어 대부분은 대문자 소문자를 구분한다.)
4. 변수명의 첫 글자는 숫자를 사용할 수 없다.
(ex: a1은 이상이 없으나 1a는 에러가 난다.)
5. 예약어(print, list, dict, if, for 등등)는 변수명으로 사용할 수 없다. 

*. 가급적이면 소문자만 사용한다.
*. 한글은 사용하지 말자.
*. 의미있는 변수명을 사용하자.

#############
# 기본 자료형  type
#############

정수 int  자연수(1, 10, 15)
실수 float  소수(3.14, 2.7)
논리 bool  성공 실패(True False)
문자열 str '글자'
* 타입 type 그 자료가 어떤 타입인지 알려준다.

::정수 int::
소수(실수)를 넣어도 자연수(정수)가 나온다.
논리인 True를 넣으면 1이, False를 넣으면 0이 된다.

* 따옴표가 붙게 되면 그 내용이 숫자여도 문자열로 인식한다. 100과 '100'은 같지 않다.
* 만약 문자열로 숫자를 정의하고, 나중에 정수로 정의를 하게 되면 그 문자열은 정수가 된다.

::실수 float::
자연수(정수)를 넣어도 소수(실수)가 나온다. 
논리인 True를 넣으면 1.0이, False를 넣으면 0이 된다.
문자열인 숫자를 넣어도, 그것이 실수가 아니라면 실수로 만든다.

::파이썬은 타입까지 적지 않아도 되지만, 자바의 경우 타입을 기재해야한다.

::논리 bool::
0이나 무엇이든 없으면 false, 무언가 있으면 True가 된다.

::문자열 String::
따옴표나 쌍따옴표나 어느쪽이든 붙어있으면 문자열이 된다.
숫자 또한 str의 안이나 따옴표 안에 넣으면 문자열로 취급된다. (예약어도 동일하다)

#############
# 인덱싱 indexing
#############
문자열, 리스트, 튜플 모두 동일

몇 번째인지를 알려주는 고유한 번호.

s= 'Hello' 라고 가정할 때,

  H   E    L    L   O
  0   1    2    3   4  index
 -5  -4   -3  -2  -1

오른쪽부터 센다면 마이너스(-)를 붙이면 된다.
따라서 마지막 글자를 얻고 싶다면 굳이 숫자를 세지 않고도 -1을 입력하면 된다.

* 파이썬은 0에서 시작한다.

#############
# 슬라이싱 indexing
#############

한 문자 이상으로 구성된 단어나 문장 등을 추출할 때 사용한다.
문법으로는, ss[start:stop:step]이나, step은 생략이 가능하다. 
한글로 표현한다면, stop의 숫자는 n번째 미만 으로 표현된다.
ss[시작 숫자:n번째 미만:뛰어넘을 간격 수]

#############
# 출력 print()
##############

escape character
이스케이프 문자, 확장 문자
문자열 안쪽에 따옴표를 쓰고 싶을 경우 밖의 따옴표를 쌍따옴표로 바꾼다.
따옴표만 쓰고 싶을 경우, \를 사용한다. 
\의 뒤에 있는 것은 글자 취급한다. 이것을 이스케이프(확장) 문자라고 한다.
\n : 줄 바꾸기 = 프린트 한번 더 띄우기
\t : 일정 간격 띄우기 = ,(쉼표)

**print('문장','문장','문장')일 때,

end = ' ' : 줄 바꿈 강제 방지. 따옴표 안에 기호를 넣으면 왼쪽에 붙는다.
sep = ' ' : 따옴표 안에 기호를 넣으면, 쉼표를 기호로 치환한다. 구분자 설정.

%연산자
%d : 자리 표시자 decimal 정수
%f : 자리 표시자 float 실수
%s : 자리 표시자 string 문자열

ex) print('%s는 고양이다' % '검정이')

다른 문자열과 섞어서 쓸 때에 자주 쓰는 방법.
어차피 글자 형태로 인식되기 때문에 %s로 써도 상관 없다. 그러나 %f의 경우 세밀하게 조정하고 싶다면 %f를 사용하여야한다.
%연산자를 쓰지 않아도, 쉼표를 이용하면 똑같은 효과를 볼 수 있다. 차이점이라면 %연산자는 붙여서 쓸 수 있지만, 쉼표는 띄어쓰기가 들어간다는 것이다.
%연산자는 좀 더 세밀하게 사용이 가능한데, %와 영어의 사이에 숫자를 적으면, 그 숫자만큼의 자리를 확보할 수 있다.
%f는 숫자 뒤에 .숫자를 쓰는 것으로 소수점의 자리수를 조정할 수 있다.
단, 이 숫자는 실수의 소수점을 포함하여 자리를 확보한다. (즉, 3.14에서 총 자리수를 소수점 자리수 조정을 포함하지 않고 5라고 한다면 3.140000가 되는 것이다. 이미 소수점으로 5자리만큼의 공간이 확보되어있으므로 늘어나거나 줄어드는 일은 없다.*(확실하지 않음))

코드의 안쪽 %의 뒤에 (코드명, 코드명)을 하는 것으로 여러개를 넣을 수도 있다.

::파이썬은 들여쓰기에 민감하다::

좀 더 세밀하게 출력하는 방법들
:: %연산자, format(), f-strings

format()
따옴표의 내부에 { } 를 넣고, 뒤에 .format(변수명)을 적어 입력한다.
%연산자와 마찬가지로, 괄호 안에 (코드명, 코드명)을 넣는 것으로 여러개를 넣을 수 있다.
덧붙여, 앞쪽 { } 의 안에 번호를 넣는 것으로 뒷쪽의 나열 순서가 어떻더라도 마음대로 지정할 수 있다.

f-strings
맨 앞에 f를 붙여, { }의 안에 변수명을 적는다. (변수명은 사용하기 이전에 정의한다)
ex) print(f '{변수명}내용 {변수명}')


#############
# 입력 input()
#############

글자를 입력하게 해주는 것. 입력을 받아서 처리한다.
input으로 들어오는 수는 무조건 string(문자열)으로 처리 된다.
이것을 정수로 바꾸고 싶을 때에는, 변수를 정의하는 input 코드에서 앞쪽에 int()를 붙여준다.